<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="UnitTest.Port.Project.Base">
<Super>Port.UnitTest.TestCase,Port.TestUtils.MockProject</Super>
<TimeCreated>64329,41592.76981</TimeCreated>

<Parameter name="MOCKNAME">
<Default>TestProject</Default>
</Parameter>

<Property name="BaseInstance">
<Type>Port.Project.Base</Type>
</Property>

<Method name="OnBeforeOneTest">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ..BaseInstance = ##class(Port.Project.Base).%New("/CacheProjects/"_$namespace_"/"_..#MOCKNAME)
  quit $$$OK
]]></Implementation>
</Method>

<Method name="OnBeforeAllTests">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  $$$QuitOnError(..Create())
  quit $$$OK
]]></Implementation>
</Method>

<Method name="OnAfterAllTests">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  $$$QuitOnError(..Delete())
  do ##class(%File).RemoveDirectoryTree("/CacheProjects/"_$namespace_"/"_..#MOCKNAME)
  quit $$$OK
]]></Implementation>
</Method>

<Method name="TestPropertyDefinition">
<Implementation><![CDATA[
  
  #define CheckProperty(%propName)  ##class(%Dictionary.PropertyDefinition).%ExistsId("Port.Project.Base||"_%propName)
  
  for prop="Logger","ProjectName","Project","Slash","BasePath","IncPath","ClassPath","IntPath","MacPath","WebPath","MvbPath","MviPath","BasPath","DfiPath","AffectedCount","VCS","IsBatch","Overwrite","LogLevel" {
    do $$$AssertEquals($$$CheckProperty(prop), 1, "Property "_prop_" should exist.")
  }
]]></Implementation>
</Method>

<Method name="TestGetProjectName">
<Implementation><![CDATA[  do $$$AssertEquals(..BaseInstance.GetProjectName(), ..#MOCKNAME, "Should return the project name")
]]></Implementation>
</Method>

<Method name="TestCheckUbiquity">
<Implementation><![CDATA[
   
  set port = ##class(%Studio.Project).%OpenId("port")
  set baseInstance = ##class(Port.Project.Base).%New("/CacheProjects/"_$namespace_"/port")      
  $$$ThrowOnError(port.CreateClone("faux"))
  set faux = ##class(%Studio.Project).%OpenId("faux")
  do faux.Unlock()  
  do baseInstance.CheckUbiquity(.uList)
  set id = ""
  for {
    set id = $order(uList(id), 1, itemData)
    quit:id=""
    
    set itemName = $listget(itemData, 1)    
    set portIdExists = (port.Items.FindObjectId($replace(id, "faux", "port")) '= "")
    set fauxIdExists = (faux.Items.FindObjectId(id) '= "")    
    
    do $$$AssertEquals(portIdExists && fauxIdExists, 1, itemName_" should be ubiquous.")
  }
  
  do ##class(%Studio.Project).%DeleteId("faux")
]]></Implementation>
</Method>

<Method name="TestIsOutdated">
<Implementation><![CDATA[
  
 set fauxPath = "/CacheProjects/"_$namespace_"/faux"
 set faux = ##class(%Studio.Project).%New("faux")
 do faux.%Save()
 
 set base = ##class(Port.Project.Base).%New(fauxPath)
 set routine = ##class(%Routine).%New("sayhey.mac")
 
 do Execute(1)
 do Execute(0)

Execute(expected)
  if expected = 1 {
    do CreateFile
    do $$$LogMessage("Creating a 2 seconds gap ...")
    hang 2
    do CreateRoutine
  } else {
    do CreateRoutine
    do $$$LogMessage("Creating a 2 seconds gap ...")
    hang 2
    do CreateFile
  }  
  do $$$AssertEquals(base.IsOutdated("sayhey.mac", fauxPath_"/mac/sayhey.mac.txt", 0), expected, "Should be "_$case(expected, 1: "outdated", :"up-to-date.")_".")
  do ##class(%File).RemoveDirectoryTree(fauxPath)
  do ##class(%Routine).Delete("sayhey.mac")
  quit
  
CreateRoutine
  do routine.Clear()  
  do routine.WriteLine("test")
  do routine.WriteLine($char(9)_"write ""hey!""")
  do routine.WriteLine($char(9)_"quit")
  do routine.%Save()
  
  do faux.AddItem("sayhey.mac")
  do faux.%Save()
  quit
  
CreateFile
  do ##class(%File).CreateDirectoryChain(fauxPath_"/mac")
  set fs = ##class(%FileCharacterStream).%New()
  set fs.Filename = fauxPath_"/mac/sayhey.mac.txt"
  do fs.CopyFrom(routine)
  do fs.%Save()
  quit
]]></Implementation>
</Method>
</Class>
</Export>
